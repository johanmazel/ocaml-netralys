(* This file was autogenerated by MPL *)
module Pcap_entry = struct
  open Mpl_stdlib
  exception Bad_packet of string

  class o
    ~(data_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = data_length+4+4+4+4
      method sec =
        Mpl_uint32.to_int32 (Mpl_uint32.at env (0))
      method set_sec v : unit =
        Mpl_uint32.marshal (env_at env (0) 4) (Mpl_uint32.of_int32 v)

      method usec =
        Mpl_uint32.to_int32 (Mpl_uint32.at env (4))
      method set_usec v : unit =
        Mpl_uint32.marshal (env_at env (4) 4) (Mpl_uint32.of_int32 v)


      method reallen =
        Mpl_uint32.to_int32 (Mpl_uint32.at env (4+4+4))
      method set_reallen v : unit =
        Mpl_uint32.marshal (env_at env (4+4+4) 4) (Mpl_uint32.of_int32 v)

      method data =
        Mpl_raw.at env (4+4+4+4) data_length
      (* set_data unsupported for now (type byte array) *)
      method data_env : env = env_at env (4+4+4+4) data_length
      method data_frag = Mpl_raw.frag env (4+4+4+4) data_length
      method data_length = data_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Pcap_entry.pcap_entry ]";
        out ("  sec = " ^ (Printf.sprintf "%lu" self#sec));
        out ("  usec = " ^ (Printf.sprintf "%lu" self#usec));
        (* caplen : bound *)
        out ("  reallen = " ^ (Printf.sprintf "%lu" self#reallen));
        out ("  data = " ^ (Mpl_raw.prettyprint self#data));
        ()
    end

  let t
    ~sec
    ~usec
    ~reallen
    ~(data:data)
    env =
      let ___env = env_at env (4+4+4+4) 0 in
      let data___len = match data with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let data___sizeof = data___len in
      let caplen = (Mpl_uint32.of_int32 (Int32.of_int data___sizeof)) in (* bound *)
      let sec = (Mpl_uint32.of_int32 sec) in
      let usec = (Mpl_uint32.of_int32 usec) in
      let reallen = (Mpl_uint32.of_int32 reallen) in
      let data = data in
      Mpl_uint32.marshal env sec;
      Mpl_uint32.marshal env usec;
      Mpl_uint32.marshal env caplen;
      Mpl_uint32.marshal env reallen;
      skip env data___len;
      new o
      ~data_length:data___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env

  let unmarshal 
    (env:env) : o =
    skip env 4; (* skipped sec *)
    skip env 4; (* skipped usec *)
    let caplen = Mpl_uint32.unmarshal env in
    skip env 4; (* skipped reallen *)
    let data_length = (Mpl_uint32.to_int caplen) in
    skip env data_length; (* skipped data *)
    new o env
    ~data_length:data_length
end

