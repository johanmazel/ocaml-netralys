(* This file was autogenerated by MPL *)
module Tcp = struct
  open Mpl_stdlib
  exception Bad_packet of string

  class o
    ~(options_length:int)
    ~(data_length:int)
    (env:env) =
    object(self)
      method env = env_at env 0 self#sizeof
      method sizeof = data_length+options_length+2+2+2+1+1+4+4+2+2
      method sport =
        Mpl_uint16.to_int (Mpl_uint16.at env (0))
      method set_sport v : unit =
        Mpl_uint16.marshal (env_at env (0) 2) (Mpl_uint16.of_int v)

      method dport =
        Mpl_uint16.to_int (Mpl_uint16.at env (2))
      method set_dport v : unit =
        Mpl_uint16.marshal (env_at env (2) 2) (Mpl_uint16.of_int v)

      method seq_number =
        Mpl_uint32.to_int32 (Mpl_uint32.at env (2+2))
      method set_seq_number v : unit =
        Mpl_uint32.marshal (env_at env (2+2) 4) (Mpl_uint32.of_int32 v)

      method ack_number =
        Mpl_uint32.to_int32 (Mpl_uint32.at env (2+2+4))
      method set_ack_number v : unit =
        Mpl_uint32.marshal (env_at env (2+2+4) 4) (Mpl_uint32.of_int32 v)





      method cwr =
        let __bitdummy0 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4)) in
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        ((__bitdummy1 lsr 7) lsl 0)
      (* set_cwr unsupported for now (type bit) *)

      method ece =
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        (((__bitdummy1 lsr 6) land 1) lsl 0)
      (* set_ece unsupported for now (type bit) *)

      method urg =
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        (((__bitdummy1 lsr 5) land 1) lsl 0)
      (* set_urg unsupported for now (type bit) *)

      method ack =
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        (((__bitdummy1 lsr 4) land 1) lsl 0)
      (* set_ack unsupported for now (type bit) *)

      method psh =
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        (((__bitdummy1 lsr 3) land 1) lsl 0)
      (* set_psh unsupported for now (type bit) *)

      method rst =
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        (((__bitdummy1 lsr 2) land 1) lsl 0)
      (* set_rst unsupported for now (type bit) *)

      method syn =
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        (((__bitdummy1 lsr 1) land 1) lsl 0)
      (* set_syn unsupported for now (type bit) *)

      method fin =
        let __bitdummy1 = Mpl_byte.to_int (Mpl_byte.at env (2+2+4+4+1)) in
        (((__bitdummy1 lsr 0) land 1) lsl 0)
      (* set_fin unsupported for now (type bit) *)

      method window =
        Mpl_uint16.to_int (Mpl_uint16.at env (2+2+4+4+1+1))
      method set_window v : unit =
        Mpl_uint16.marshal (env_at env (2+2+4+4+1+1) 2) (Mpl_uint16.of_int v)

      method checksum =
        Mpl_uint16.to_int (Mpl_uint16.at env (2+2+4+4+1+1+2))
      method set_checksum v : unit =
        Mpl_uint16.marshal (env_at env (2+2+4+4+1+1+2) 2) (Mpl_uint16.of_int v)

      method urg_pointer =
        Mpl_uint16.to_int (Mpl_uint16.at env (2+2+4+4+1+1+2+2))
      method set_urg_pointer v : unit =
        Mpl_uint16.marshal (env_at env (2+2+4+4+1+1+2+2) 2) (Mpl_uint16.of_int v)

      method options_offset = 2+2+4+4+1+1+2+2+2

      method options =
        Mpl_raw.at env (2+2+4+4+1+1+2+2+2) options_length
      (* set_options unsupported for now (type byte array) *)
      method options_env : env = env_at env (2+2+4+4+1+1+2+2+2) options_length
      method options_frag = Mpl_raw.frag env (2+2+4+4+1+1+2+2+2) options_length
      method options_length = options_length

      method data_offset = 2+2+4+4+1+1+2+2+2+options_length

      method data =
        Mpl_raw.at env (2+2+4+4+1+1+2+2+2+options_length) data_length
      (* set_data unsupported for now (type byte array) *)
      method data_env : env = env_at env (2+2+4+4+1+1+2+2+2+options_length) data_length
      method data_frag = Mpl_raw.frag env (2+2+4+4+1+1+2+2+2+options_length) data_length
      method data_length = data_length

      method total_length = 2+2+4+4+1+1+2+2+2+options_length+data_length


      method prettyprint =
        let out = prerr_endline in
        out "[ Tcp.tcp ]";
        out ("  sport = " ^ (Printf.sprintf "%u" self#sport));
        out ("  dport = " ^ (Printf.sprintf "%u" self#dport));
        out ("  seq_number = " ^ (Printf.sprintf "%lu" self#seq_number));
        out ("  ack_number = " ^ (Printf.sprintf "%lu" self#ack_number));
        (* __bitdummy0 : bound *)
        (* data_off : bound *)
        (* reserved : bound *)
        (* __bitdummy1 : bound *)
        out ("  cwr = " ^ (Printf.sprintf "%u" self#cwr));
        out ("  ece = " ^ (Printf.sprintf "%u" self#ece));
        out ("  urg = " ^ (Printf.sprintf "%u" self#urg));
        out ("  ack = " ^ (Printf.sprintf "%u" self#ack));
        out ("  psh = " ^ (Printf.sprintf "%u" self#psh));
        out ("  rst = " ^ (Printf.sprintf "%u" self#rst));
        out ("  syn = " ^ (Printf.sprintf "%u" self#syn));
        out ("  fin = " ^ (Printf.sprintf "%u" self#fin));
        out ("  window = " ^ (Printf.sprintf "%u" self#window));
        out ("  checksum = " ^ (Printf.sprintf "%u" self#checksum));
        out ("  urg_pointer = " ^ (Printf.sprintf "%u" self#urg_pointer));
        (* options_offset : bound *)
        out ("  options = " ^ (Mpl_raw.prettyprint self#options));
        (* data_offset : bound *)
        out ("  data = " ^ (Mpl_raw.prettyprint self#data));
        (* total_length : bound *)
        ()
    end

  let t
    ?(sport=1024)
    ?(dport=80)
    ?(seq_number=1000l)
    ?(ack_number=1000l)
    ?(cwr=0)
    ?(ece=0)
    ?(urg=0)
    ?(ack=0)
    ?(psh=0)
    ?(rst=0)
    ?(syn=0)
    ?(fin=0)
    ?(window=1024)
    ?(checksum=0)
    ?(urg_pointer=0)
    ~(options:data)
    ~(data:data)
    env =
      (* let options_offset___offset = 2+2+4+4+1+1+2+2+2 in *)
      let ___env = env_at env (2+2+4+4+1+1+2+2+2) 0 in
      let options___len = match options with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let ___al = (4 - (options___len mod 4)) mod 4 in for i = 1 to ___al do
        Mpl_byte.marshal ___env (Mpl_byte.of_char '\000');
      done; let options___len = options___len + ___al in
      let data_offset___offset = 2+2+4+4+1+1+2+2+2+options___len in
      let ___env = env_at env (2+2+4+4+1+1+2+2+2+options___len) 0 in
      let data___len = match data with 
      |`Str x -> Mpl_raw.marshal ___env x; String.length x
      |`Sub fn -> fn ___env; curpos ___env
      |`None -> 0
      |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
      let data_off = (data_offset___offset / 4) in (* bit bound *)
      let reserved = 0 in (* bit bound *)
      if cwr < 0 || cwr > 1 then raise (Bad_packet "out of range (0 < cwr < 1)");
      if ece < 0 || ece > 1 then raise (Bad_packet "out of range (0 < ece < 1)");
      if urg < 0 || urg > 1 then raise (Bad_packet "out of range (0 < urg < 1)");
      if ack < 0 || ack > 1 then raise (Bad_packet "out of range (0 < ack < 1)");
      if psh < 0 || psh > 1 then raise (Bad_packet "out of range (0 < psh < 1)");
      if rst < 0 || rst > 1 then raise (Bad_packet "out of range (0 < rst < 1)");
      if syn < 0 || syn > 1 then raise (Bad_packet "out of range (0 < syn < 1)");
      if fin < 0 || fin > 1 then raise (Bad_packet "out of range (0 < fin < 1)");
      let __bitdummy1 = Mpl_byte.of_int (fin + (syn lsl 1) + (rst lsl 2) + (psh lsl 3) + (ack lsl 4) + (urg lsl 5) + (ece lsl 6) + (cwr lsl 7)) in
      let __bitdummy0 = Mpl_byte.of_int (reserved + (data_off lsl 4)) in
      let sport = (Mpl_uint16.of_int sport) in
      let dport = (Mpl_uint16.of_int dport) in
      let seq_number = (Mpl_uint32.of_int32 seq_number) in
      let ack_number = (Mpl_uint32.of_int32 ack_number) in
      let window = (Mpl_uint16.of_int window) in
      let checksum = (Mpl_uint16.of_int checksum) in
      let urg_pointer = (Mpl_uint16.of_int urg_pointer) in
      (* let options = options in *)
      (* let data = data in *)
      Mpl_uint16.marshal env sport;
      Mpl_uint16.marshal env dport;
      Mpl_uint32.marshal env seq_number;
      Mpl_uint32.marshal env ack_number;
      Mpl_byte.marshal env __bitdummy0;
      (* bit data_off *)
      (* bit reserved *)
      Mpl_byte.marshal env __bitdummy1;
      (* bit cwr *)
      (* bit ece *)
      (* bit urg *)
      (* bit ack *)
      (* bit psh *)
      (* bit rst *)
      (* bit syn *)
      (* bit fin *)
      Mpl_uint16.marshal env window;
      Mpl_uint16.marshal env checksum;
      Mpl_uint16.marshal env urg_pointer;
      skip env options___len;
      skip env data___len;
      new o
      ~options_length:options___len
      ~data_length:data___len
      env

  let m (x:(env->o)) env = x env
  let sizeof (x:o) = x#sizeof
  let prettyprint (x:o) = x#prettyprint
  let env (x:o) = x#env

  let unmarshal 
    (env:env) : o =
    skip env 2; (* skipped sport *)
    skip env 2; (* skipped dport *)
    skip env 4; (* skipped seq_number *)
    skip env 4; (* skipped ack_number *)
    let __bitdummy0 = Mpl_byte.to_int (Mpl_byte.unmarshal env) in
    let data_off = ((__bitdummy0 lsr 4) lsl 0) in (* bitu *)
    (* let reserved = (((__bitdummy0 lsr 0) land 15) lsl 0) in (\* bitu *\) *)
    skip env 1; (* skipped __bitdummy1 *)
    skip env 2; (* skipped window *)
    skip env 2; (* skipped checksum *)
    skip env 2; (* skipped urg_pointer *)
    skip env 0; (* skipped options_offset *)
    let options_offset___offset = curpos env in
    let options_length = ((data_off * 4) - options_offset___offset) in
    skip env options_length; (* skipped options *)
    skip env 0; (* skipped data_offset *)
    (* let data_offset___offset = curpos env in *)
    let data_length = (remaining env) in
    skip env data_length; (* skipped data *)
    skip env 0; (* skipped total_length *)
    new o env
    ~options_length:options_length
    ~data_length:data_length
end

