(* This file was autogenerated by MPL *)
module Ethernet = struct
  open Mpl_stdlib
  exception Bad_packet of string

  module IPv6 = struct
    class o
      ~(data_length:int)
      (env:env) =
      object(self)
        method env = env_at env 0 self#sizeof
        method sizeof = data_length+2+6+6
        method dest_mac =
          Mpl_raw.at env (0) 6
        (* set_dest_mac unsupported for now (type byte array) *)
        method dest_mac_env : env = env_at env (0) 6
        method dest_mac_frag = Mpl_raw.frag env (0) 6
        method dest_mac_length = 6

        method src_mac =
          Mpl_raw.at env (6) 6
        (* set_src_mac unsupported for now (type byte array) *)
        method src_mac_env : env = env_at env (6) 6
        method src_mac_frag = Mpl_raw.frag env (6) 6
        method src_mac_length = 6


        method data =
          Mpl_raw.at env (6+6+2) data_length
        (* set_data unsupported for now (type byte array) *)
        method data_env : env = env_at env (6+6+2) data_length
        method data_frag = Mpl_raw.frag env (6+6+2) data_length
        method data_length = data_length

        method end_of_packet = 6+6+2+data_length


        method prettyprint =
          let out = prerr_endline in
          out "[ Ethernet.IPv6.ethernet ]";
          out ("  dest_mac = " ^ (Mpl_raw.prettyprint self#dest_mac));
          out ("  src_mac = " ^ (Mpl_raw.prettyprint self#src_mac));
          (* length : bound *)
          out ("  data = " ^ (Mpl_raw.prettyprint self#data));
          (* end_of_packet : bound *)
          ()
      end

    let t
      ~(dest_mac:data)
      ~(src_mac:data)
      ~(data:data)
      env =
        let ___env = env_at env (0) 0 in
        let dest_mac___len = match dest_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let ___env = env_at env (6) 0 in
        let src_mac___len = match src_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let length___offset = 6+6+2 in
        let ___env = env_at env (6+6+2) 0 in
        let data___len = match data with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let end_of_packet___offset = 6+6+2+data___len in
        let length = (Mpl_uint16.of_int (end_of_packet___offset - length___offset)) in (* bound *)
        (* let dest_mac = dest_mac in *)
        (* let src_mac = src_mac in *)
        (* let data = data in *)
        skip env dest_mac___len;
        skip env src_mac___len;
        Mpl_uint16.marshal env length;
        skip env data___len;
        new o
        ~data_length:data___len
        env

    let m (x:(env->o)) env = x env
    let sizeof (x:o) = x#sizeof
    let prettyprint (x:o) = x#prettyprint
    let env (x:o) = x#env
  end

  module Arp = struct
    class o
      ~(data_length:int)
      (env:env) =
      object(self)
        method env = env_at env 0 self#sizeof
        method sizeof = data_length+2+6+6
        method dest_mac =
          Mpl_raw.at env (0) 6
        (* set_dest_mac unsupported for now (type byte array) *)
        method dest_mac_env : env = env_at env (0) 6
        method dest_mac_frag = Mpl_raw.frag env (0) 6
        method dest_mac_length = 6

        method src_mac =
          Mpl_raw.at env (6) 6
        (* set_src_mac unsupported for now (type byte array) *)
        method src_mac_env : env = env_at env (6) 6
        method src_mac_frag = Mpl_raw.frag env (6) 6
        method src_mac_length = 6


        method data =
          Mpl_raw.at env (6+6+2) data_length
        (* set_data unsupported for now (type byte array) *)
        method data_env : env = env_at env (6+6+2) data_length
        method data_frag = Mpl_raw.frag env (6+6+2) data_length
        method data_length = data_length

        method end_of_packet = 6+6+2+data_length


        method prettyprint =
          let out = prerr_endline in
          out "[ Ethernet.Arp.ethernet ]";
          out ("  dest_mac = " ^ (Mpl_raw.prettyprint self#dest_mac));
          out ("  src_mac = " ^ (Mpl_raw.prettyprint self#src_mac));
          (* length : bound *)
          out ("  data = " ^ (Mpl_raw.prettyprint self#data));
          (* end_of_packet : bound *)
          ()
      end

    let t
      ~(dest_mac:data)
      ~(src_mac:data)
      ~(data:data)
      env =
        let ___env = env_at env (0) 0 in
        let dest_mac___len = match dest_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let ___env = env_at env (6) 0 in
        let src_mac___len = match src_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let length___offset = 6+6+2 in
        let ___env = env_at env (6+6+2) 0 in
        let data___len = match data with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let end_of_packet___offset = 6+6+2+data___len in
        let length = (Mpl_uint16.of_int (end_of_packet___offset - length___offset)) in (* bound *)
        (* let dest_mac = dest_mac in *)
        (* let src_mac = src_mac in *)
        (* let data = data in *)
        skip env dest_mac___len;
        skip env src_mac___len;
        Mpl_uint16.marshal env length;
        skip env data___len;
        new o
        ~data_length:data___len
        env

    let m (x:(env->o)) env = x env
    let sizeof (x:o) = x#sizeof
    let prettyprint (x:o) = x#prettyprint
    let env (x:o) = x#env
  end

  module IPv4 = struct
    class o
      ~(data_length:int)
      (env:env) =
      object(self)
        method env = env_at env 0 self#sizeof
        method sizeof = data_length+2+6+6
        method dest_mac =
          Mpl_raw.at env (0) 6
        (* set_dest_mac unsupported for now (type byte array) *)
        method dest_mac_env : env = env_at env (0) 6
        method dest_mac_frag = Mpl_raw.frag env (0) 6
        method dest_mac_length = 6

        method src_mac =
          Mpl_raw.at env (6) 6
        (* set_src_mac unsupported for now (type byte array) *)
        method src_mac_env : env = env_at env (6) 6
        method src_mac_frag = Mpl_raw.frag env (6) 6
        method src_mac_length = 6


        method data =
          Mpl_raw.at env (6+6+2) data_length
        (* set_data unsupported for now (type byte array) *)
        method data_env : env = env_at env (6+6+2) data_length
        method data_frag = Mpl_raw.frag env (6+6+2) data_length
        method data_length = data_length

        method end_of_packet = 6+6+2+data_length


        method prettyprint =
          let out = prerr_endline in
          out "[ Ethernet.IPv4.ethernet ]";
          out ("  dest_mac = " ^ (Mpl_raw.prettyprint self#dest_mac));
          out ("  src_mac = " ^ (Mpl_raw.prettyprint self#src_mac));
          (* length : bound *)
          out ("  data = " ^ (Mpl_raw.prettyprint self#data));
          (* end_of_packet : bound *)
          ()
      end

    let t
      ~(dest_mac:data)
      ~(src_mac:data)
      ~(data:data)
      env =
        let ___env = env_at env (0) 0 in
        let dest_mac___len = match dest_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let ___env = env_at env (6) 0 in
        let src_mac___len = match src_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let length___offset = 6+6+2 in
        let ___env = env_at env (6+6+2) 0 in
        let data___len = match data with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let end_of_packet___offset = 6+6+2+data___len in
        let length = (Mpl_uint16.of_int (end_of_packet___offset - length___offset)) in (* bound *)
        (* let dest_mac = dest_mac in *)
        (* let src_mac = src_mac in *)
        (* let data = data in *)
        skip env dest_mac___len;
        skip env src_mac___len;
        Mpl_uint16.marshal env length;
        skip env data___len;
        new o
        ~data_length:data___len
        env

    let m (x:(env->o)) env = x env
    let sizeof (x:o) = x#sizeof
    let prettyprint (x:o) = x#prettyprint
    let env (x:o) = x#env
  end

  module E802_2 = struct
    class o
      ~(data_length:int)
      (env:env) =
      object(self)
        method env = env_at env 0 self#sizeof
        method sizeof = data_length+2+6+6
        method dest_mac =
          Mpl_raw.at env (0) 6
        (* set_dest_mac unsupported for now (type byte array) *)
        method dest_mac_env : env = env_at env (0) 6
        method dest_mac_frag = Mpl_raw.frag env (0) 6
        method dest_mac_length = 6

        method src_mac =
          Mpl_raw.at env (6) 6
        (* set_src_mac unsupported for now (type byte array) *)
        method src_mac_env : env = env_at env (6) 6
        method src_mac_frag = Mpl_raw.frag env (6) 6
        method src_mac_length = 6


        method data =
          Mpl_raw.at env (6+6+2) data_length
        (* set_data unsupported for now (type byte array) *)
        method data_env : env = env_at env (6+6+2) data_length
        method data_frag = Mpl_raw.frag env (6+6+2) data_length
        method data_length = data_length

        method end_of_packet = 6+6+2+data_length


        method prettyprint =
          let out = prerr_endline in
          out "[ Ethernet.E802_2.ethernet ]";
          out ("  dest_mac = " ^ (Mpl_raw.prettyprint self#dest_mac));
          out ("  src_mac = " ^ (Mpl_raw.prettyprint self#src_mac));
          (* length : bound *)
          out ("  data = " ^ (Mpl_raw.prettyprint self#data));
          (* end_of_packet : bound *)
          ()
      end

    let t
      ~(dest_mac:data)
      ~(src_mac:data)
      ~(data:data)
      env =
        let ___env = env_at env (0) 0 in
        let dest_mac___len = match dest_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let ___env = env_at env (6) 0 in
        let src_mac___len = match src_mac with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let length___offset = 6+6+2 in
        let ___env = env_at env (6+6+2) 0 in
        let data___len = match data with 
        |`Str x -> Mpl_raw.marshal ___env x; String.length x
        |`Sub fn -> fn ___env; curpos ___env
        |`None -> 0
        |`Frag t -> Mpl_raw.blit ___env t; curpos ___env in
        let end_of_packet___offset = 6+6+2+data___len in
        let length = (Mpl_uint16.of_int (end_of_packet___offset - length___offset)) in (* bound *)
        (* let dest_mac = dest_mac in *)
        (* let src_mac = src_mac in *)
        (* let data = data in *)
        skip env dest_mac___len;
        skip env src_mac___len;
        Mpl_uint16.marshal env length;
        skip env data___len;
        new o
        ~data_length:data___len
        env

    let m (x:(env->o)) env = x env
    let sizeof (x:o) = x#sizeof
    let prettyprint (x:o) = x#prettyprint
    let env (x:o) = x#env
  end

  type o = [
  |`E802_2 of E802_2.o
  |`IPv4 of IPv4.o
  |`Arp of Arp.o
  |`IPv6 of IPv6.o
  ]

  type x = [
  |`E802_2 of (env -> E802_2.o)
  |`IPv4 of (env -> IPv4.o)
  |`Arp of (env -> Arp.o)
  |`IPv6 of (env -> IPv6.o)
  ]

  let m (x:x) env : o = match x with
  |`E802_2 (fn:(env->E802_2.o)) -> `E802_2 (fn env)
  |`IPv4 (fn:(env->IPv4.o)) -> `IPv4 (fn env)
  |`Arp (fn:(env->Arp.o)) -> `Arp (fn env)
  |`IPv6 (fn:(env->IPv6.o)) -> `IPv6 (fn env)

  let prettyprint (x:o) = match x with
  |`E802_2 x -> x#prettyprint
  |`IPv4 x -> x#prettyprint
  |`Arp x -> x#prettyprint
  |`IPv6 x -> x#prettyprint

  let sizeof (x:o) = match x with
  |`E802_2 x -> x#sizeof
  |`IPv4 x -> x#sizeof
  |`Arp x -> x#sizeof
  |`IPv6 x -> x#sizeof

  let env (x:o) = match x with
  |`E802_2 x -> x#env
  |`IPv4 x -> x#env
  |`Arp x -> x#env
  |`IPv6 x -> x#env


  let unmarshal 
    (env:env) : o =
    skip env 6; (* skipped dest_mac *)
    skip env 6; (* skipped src_mac *)
    let length = Mpl_uint16.unmarshal env in
    (* let length___offset = curpos env in *)
    match (Mpl_uint16.to_int length) with
    |34525 -> `IPv6 (
      let data_length = (remaining env) in
      skip env data_length; (* skipped data *)
      skip env 0; (* skipped end_of_packet *)
      (* let end_of_packet___offset = curpos env in *)
      new IPv6.o env
      ~data_length:data_length
    )
    |2054 -> `Arp (
      let data_length = (remaining env) in
      skip env data_length; (* skipped data *)
      skip env 0; (* skipped end_of_packet *)
      (* let end_of_packet___offset = curpos env in *)
      new Arp.o env
      ~data_length:data_length
    )
    |2048 -> `IPv4 (
      let data_length = (remaining env) in
      skip env data_length; (* skipped data *)
      skip env 0; (* skipped end_of_packet *)
      (* let end_of_packet___offset = curpos env in *)
      new IPv4.o env
      ~data_length:data_length
    )
    |__gulength when ((__gulength >= 46) && (__gulength <= 1500)) -> `E802_2 (
      let data_length = (Mpl_uint16.to_int length) in
      skip env data_length; (* skipped data *)
      skip env 0; (* skipped end_of_packet *)
      (* let end_of_packet___offset = curpos env in *)
      new E802_2.o env
      ~data_length:data_length
    )
    |x -> raise (Bad_packet (Printf.sprintf ": %d" x))
end

